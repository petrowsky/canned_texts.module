<?php

/**
 * Implementation of hook_help().
 */
function canned_texts_help($path, $arg) {
  switch ($path) {
    case 'admin/help#canned_texts':
      $return = '<p>' . t('Dynamically insert pre-defined text strings into nodes or comments.') . '</p>';
      $return .= '<p>' . t('Canned Texts creates a views generated dropdown list widget in the node-form and/or comment-form. By selecting a list item, text is dynamically inserted into the node and/or comment textarea fields, at the point of the cursor. Canned Texts works with the views module and adds a new "display" to the views module called "Canned Texts".  The "Canned Texts" display provides widget settings for:') . '</p><ul>';

      $return .= '<li>' . t('Node Type: Select which node type the widget will appear on.') . '</li>';
      $return .= '<li>' . t('Show in: Select if the widget should appear in the comment form or node form.') . '</li>';
      $return .= '<li>' . t('Show title: Select if the view title should be shown above the widget.') . '</li></ul>';

      $return .= '<p><strong>' . t('Notes:') . '</strong></p><ul>';

      $return .= '<li>' . t('The widget will not be displayed if there is no content to load.') . '</li>';
      $return .= '<li>' . t('The widget will not be displayed if the user has no access permissions to the "Canned Text" view.') . '</li>';
      $return .= '<li>' . t('The text will not be pasted if the user has no access permissions to the "Canned Text" nodes.') . '</li></ul>';

      return $return;
      break;
  }
}

/**
 * Implementation of hook_views_api().
 */
function canned_texts_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu().
 */
function canned_texts_menu() {
  $items = array();
  $items['canned_texts_node'] = array(
    'title' => 'Canned Text Load Node',
    'page callback' => 'canned_texts_load_node',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['canned_texts_comment'] = array(
    'title' => 'Canned Text Load Node',
    'page callback' => 'canned_texts_load_comment',
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

function canned_texts_load_node($nid) {
  $node = node_load($nid);
  if (node_access('view', $node)) {
    $body = $node->body;
    drupal_json($body);
  }
}

function canned_texts_load_comment($cid) {
  if (user_access('access comments') || user_access('administer comments')) {
    $comment = _comment_load($cid);
    if (!empty($comment->comment)) {
      drupal_json($comment->comment);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function canned_texts_content_extra_fields($type_name) {
  $extras = array();
  $items = array();

  // Build a list of just the views/displays that are relevant for this node type.
  $views = canned_texts_get_views($type_name);
  foreach ($views as $mode => $info) {
    foreach ($info as $entry) {
      $items[] = $entry;
    }
  }

  // Now add a weight field for each view/display.
  foreach ($items as $item) {
    if (!$item['title']) {
      $item['title'] = t('None');
    }
    $extras[$item['name'] .'_'. $item['display']] = array(
      'label' => $item['title'],
      'description' => t('Canned Text: !view - !display', array('!view' => $item['name'], '!display' => $item['display'])),
      'weight' => 10,
    );

    if (user_access('administer views')) {
      $link = l(t('Configure'), 'admin/build/views/edit/' . $item['name'],
        array(
          'query' => drupal_get_destination(),
          'fragment' => 'views-tab-' . $item['display'],
        )
      );
      $extras[$item['name'] .'_'. $item['display']]['configure'] = $link;
    }
  }

  return $extras;
}

/**
 * Implementation of hook_form_alter().
 */
function canned_texts_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form' || $form['#id'] == 'comment-form') {
    $type = $form['type']['#value'];

    if ($form['#id'] != 'node-form') {
      $type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $form['nid']['#value']));
      $mode = 'comment';
    }
    else {
      $mode = 'node';
    }
    $views = canned_texts_get_views($type, $mode);

    foreach ($views as $info) {
      $view = views_get_view($info['name']);
      $view->set_display($info['display']);
      if ($view->access($info['display'])) {
        if ($view->base_table != 'node' && $view->base_table != 'comments') {
          drupal_set_message(t('Canned Texts only works with views that displays nodes or comments.
          This view is using <strong>@table</strong> as base table.', array('@table' => $view->base_table)), 'error');
          continue;
        }
        // enforce to use default style plugin
        $view->display_handler->set_option('style_plugin', 'default');
        $result = $view->execute_display($info['display']);
        $options = array(
          '' => t('Select one'),
        );
        $row_plugin = $view->display_handler->get_option('row_plugin');
        if ($row_plugin != 'fields') {
          drupal_set_message(t('Canned Texts only works with views that uses <strong>fields</strong> as rows plugins.
          This view is using <strong>@plugin</strong> as row plugin.', array('@plugin' => $row_plugin)), 'error');
          continue;
        }
        if (!empty($view->result)) {
          foreach ($view->display_handler->render_array() as $id => $row) {
            $options[$id] = filter_xss($row, array());
          }
          drupal_add_js(drupal_get_path('module', 'canned_texts') . '/canned_texts.js');
          drupal_add_css(drupal_get_path('module', 'canned_texts') . '/canned_texts.css');
          $form[$view->name . '_' . $info['display']] = array(
            '#type' => 'select',
            '#title' => $view->display_handler->get_option('show_title') ? $view->get_title() : '',
            '#options' => $options,
            '#attributes' => array(
              'class' => 'canned_text_widget mode-' . $view->base_table,
            ),
          );
        }
      }
    }
  }
}

function canned_texts_get_views($type, $mode = NULL) {

  static $used_views = array();

  if (empty($used_views)) {
    views_include('cache');
    $cache = views_cache_get("canned_texts:views");
    if (isset($cache->data)) {
      $used_views = $cache->data;
    }
    else {
      // Build and cache the data, both in the DB and statically.
      $views = views_get_applicable_views('canned texts');
      foreach ($views as $data) {
        list($view, $display_id) = $data;
        foreach ($view->display_handler->get_option('types') as $type_to_use) {
          $modes = $view->display_handler->get_option('modes');
          foreach ($modes as $value) {
            $used_views[$type_to_use][$value][] = array(
              'name' => $view->name,
              'display' => $display_id,
              'title' => $view->get_title()
            );
          }
        }
        $view->destroy();
      }
      views_cache_set("canned_texts:views", $used_views);
    }
  }

  if (is_null($mode)) {
    return isset($used_views[$type]) ? $used_views[$type] : array();
  }
  else {
    return isset($used_views[$type][$mode]) ? $used_views[$type][$mode] : array();
  }
}
