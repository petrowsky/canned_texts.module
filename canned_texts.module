<?php

/**
 * @file
 * Canned Texts Module
 */

/**
 * Implements hook_entity_info().
 */
function canned_texts_entity_info() {
  return array(
    'canned_text' => array(
      'label' => t('Canned Text'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'canned_texts',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'label',
        'name' => 'name',
      ),
      'exportable' => TRUE,
      'access callback' => 'canned_text_access',
      'module' => 'canned_texts',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'admin ui' => array(
        'path' => 'admin/content/canned_texts',
        'file' => 'canned_texts.admin.inc',
        'controller class' => 'CannedTextsUIController',
      ),
    ),
  );
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $type
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the
 *   global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function canned_text_access($op, $type = NULL, $account = NULL) {
  return user_access('administer canned texts', $account);
}

/**
 * Load a single canned text item.
 */
function canned_text_load($machine_name) {
  return canned_texts_get_items($machine_name);
}

/**
 * Gets an array of all profile types, keyed by the type name.
 *
 * @param $item_name
 *   If set, the type with the given name is returned.
 *
 * @return CannedText[]
 *   Depending whether $item_name isset, an array of canned texts or a single
 *   one.
 */
function canned_texts_get_items($item_name = NULL) {
  $types = entity_load_multiple_by_name('canned_text', isset($item_name) ? array($item_name) : FALSE);
  return isset($item_name) ? reset($types) : $types;
}

/**
 * Implements hook_permission().
 */
function canned_texts_permission() {
  return array(
    'administer canned texts' => array(
      'title' => t('Administer canned texts'),
      'description' => t('Allows to create, update and delete canned texts.'),
    ),
    'insert canned texts' => array(
      'title' => t('Insert canned texts'),
      'description' => t('Allows use the Canned Texts module to insert text into other content.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function canned_texts_field_info() {
  return array(
    'canned_text' => array(
      'label' => t('Canned Text'),
      'description' => t("This is a fake field to allow insert Canned text into other entities."),
      'settings' => array('allowed_values' => array()),
      'default_widget' => 'options_select',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function canned_texts_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  switch ($field['type']) {
    case 'canned_text':
      $res = db_query("SELECT name, label FROM {canned_texts}")->fetchAll();
      foreach ($res as $canned_text) {
        $canned_texts[$canned_text->name] = check_plain($canned_text->label);
      }

      $form['allowed_values'] = array(
        '#type' => 'select',
        '#title' => t('Allowed values list'),
        '#size' => 10,
        '#multiple' => TRUE,
        '#options' => $canned_texts,
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function canned_texts_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('canned_text'),
  );

  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function canned_texts_field_is_empty() {
  return TRUE;
}

/**
 * Implements hook_options_list().
 */
function canned_texts_options_list($field, $instance, $entity_type, $entity) {
  $options = $field['settings']['allowed_values'];
  $res = db_query("SELECT name, label FROM {canned_texts} WHERE name IN (:names)", array(
    ':names' => empty($options) ? NULL : $options))->fetchAll();
  foreach ($res as $canned_text) {
    $canned_texts[$canned_text->name] = check_plain($canned_text->label);
  }
  return $canned_texts;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function canned_texts_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'canned_text') {
    drupal_add_js(drupal_get_path('module', 'canned_texts') . '/canned_texts.js');
    $element['#prefix'] = "<div class ='canned-text-wrapper'>";
    $rel = 'edit-' . $context['field']['field_name'] . '-' . $context['langcode'];
    $rel = str_replace('_', '-', $rel);
    $rel = str_replace('--', '-', $rel);
    $element['#suffix'] = "<a rel = '" . $rel . "'href ='#' class ='canned-text-insert-button'>" . t('Insert') . '</a></div>';
  }
}

/**
 * Implements hook_menu().
 */
function canned_texts_menu() {
  $items['canned_texts/%canned_text'] = array(
    'title' => 'Canned Text',
    'page callback' => 'canned_text_ajax_load',
    'page arguments' => array(1),
    'access arguments' => array('insert canned texts'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Ajax callback to load a canned text.
 */
function canned_text_ajax_load($canned_text) {
  if (arg(2) == 'user') {
    $user = user_load(arg(3));
  }
  if (!empty($canned_text->content)) {
    if (module_exists('token')) {
      print token_replace($canned_text->content, array('user' => $user));
    }
    else {
      print $canned_text->content;
    }
    exit;
  }
}

/**
 * UI controller
 *
 * May be put in any include file and loaded via the code registry.
 */
class CannedTextsUIController extends EntityDefaultUIController {

  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Create, update and deleted canned texts.';
    $items[$this->path]['type'] = MENU_LOCAL_TASK | MENU_NORMAL_ITEM;
    return $items;
  }
}
